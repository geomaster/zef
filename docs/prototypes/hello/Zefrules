bin_dir_rel = "bin"
obj_dir_rel = "obj"
program_name = "hello"
src_dir = "src"

bin_dir = @opts.build_dir .. @bin_dir_rel
obj_dir = @opts.build_dir .. @obj_dir_rel
executable = $as_file(@bin_dir .. $cc.executable_filename(@program_name))

src_files:
    local files = $fs.glob(@src_dir .. "/*.c")
    files[@opts.hello_to_user and "src/hello_world.c" or "src/hello_user.c"] = nil
    return files

obj_to_src(obj):
    return $as_file($util.path_subst(@obj_dir .. "/%.o", @src_dir .. "/%.c", obj.filename))

src_to_obj(src):
    return $as_file($util.path_subst(@src_dir .. "/%.c", @obj_dir .. "/%.o", src.filename))

obj_files:
    return $map(@src_files, @src_to_obj)

compile_c(src, obj):
    local optimization_level = {
        debug: 0,
        release_with_debug_info: 2,
        release: 2
    }
    local cc = $cc()
                .add_file(src)
                .compile_only()
                .optimize(optimization_level[@opts.debug_level])
                .output_to(obj)

    return cc.run()

link_binary(objs, bin):
    return $cc()
            .link_only()
            .add_files(objs)
            .output_to(bin)

each (obj_files) as obj:
    local src = @obj_to_src(src)
    return @compile_c(src, obj)

(executable):
    return @link_binary(@obj_files, @executable)

